#!/usr/local/bin/perl
use List::Util qw(first max maxstr min minstr reduce shuffle sum);
my $nMax = $ARGV[0];
my $nMin = $nMax;
my $rep = 1;
my $verbose = false;
my $tracing = false;
my $totalSimTime = 5;
my $seed = -1; #Keep -1 to leave unchanged
my $ECA = false;
my $hyst = false;
my $bitmap = false;
my $srConservative = false;
my $EIFSnoDIFS;
my $ackTimeout
my @command = './waf --cwd=tmp/ --run "scratch/wlan';

foreach (@ARGV){
	$ECA = true
		if $_ eq '--eca';
	$hyst = true
		if $_ eq '--hyst';
	$bitmap = true
		if $_ eq '--bitmap';
	$verbose = true
		if $_ eq '--verbose';
	$srConservative = true
		if $_ eq '--srConservative';
	$tracing = true
		if $_ eq '--tracing';
}

if( $nMax > $nMin ){
	foreach my $i ($nMin..$nMax){
		foreach my $j (1 .. $rep){
			$seed = int(rand()*50)
				if($seed > 0);
			my @addition = ("        --nWifi=$i 
				--verbose=$verbose 
				--seed=$seed 
				--totalSimtime=$totalSimTime 
				--ECA=$ECA 
				--tracing=$tracing 
				--hysteresis=$hyst 										
				--bitmap=$bitmap 															
				--srConservative=$srConservative
				--EIFSnoDIFS=$EIFSnoDIFS
				--ackTimeout=$ackTimeout\"");
			my @outPut = "@command @addition";
			print("###Simulating iteration $j of $rep\n");
			print ("@outPut\n");
			system(@outPut);
		}
	}
}else{
		die("More than one node, please\n")
			if($nMax < 1);
		foreach my $j (1 .. $rep){
			$seed = int(rand()*50)
				if($seed > 0);
			my @outPut = ("@command --nWifi=$nMin 
				--verbose=$verbose 
				--seed=$seed 
				--totalSimtime=$totalSimTime 
				--ECA=$ECA 
				--tracing=$tracing 
				--hysteresis=$hyst 
				--bitmap=$bitmap
				--srConservative=$srConservative
				--EIFSnoDIFS=$EIFSnoDIFS
				--ackTimeout=$ackTimeout\"");
			print("###Simulating iteration $j of $rep\n");
			print ("@outPut\n");
			system(@outPut);
		}
}
